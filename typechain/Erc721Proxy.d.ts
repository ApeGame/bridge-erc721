/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface Erc721ProxyInterface extends ethers.utils.Interface {
  functions: {
    "admin(address)": FunctionFragment;
    "campaigns(address)": FunctionFragment;
    "delCampaign(address)": FunctionFragment;
    "getPublicKey()": FunctionFragment;
    "initialize()": FunctionFragment;
    "mintTo(address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "preMint(address,uint256)": FunctionFragment;
    "refund(address,address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdmin(address,bool)": FunctionFragment;
    "setCampaign(address,address,uint256)": FunctionFragment;
    "setPublicKey(address)": FunctionFragment;
    "setTxFee(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "txFee()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values: [string]): string;
  encodeFunctionData(functionFragment: "campaigns", values: [string]): string;
  encodeFunctionData(functionFragment: "delCampaign", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintTo",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "preMint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCampaign",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTxFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "txFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTxFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "DelCampaign(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PreMint(address,address,uint256)": EventFragment;
    "ProxyMinted(address,address,uint256)": EventFragment;
    "SetCampaign(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelCampaign"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PreMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCampaign"): EventFragment;
}

export type DelCampaignEvent = TypedEvent<[string] & { nft: string }>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PreMintEvent = TypedEvent<
  [string, string, BigNumber] & {
    sender: string;
    srcNft: string;
    tokenID: BigNumber;
  }
>;

export type ProxyMintedEvent = TypedEvent<
  [string, string, BigNumber] & {
    reciver: string;
    srcNft: string;
    tokenID: BigNumber;
  }
>;

export type SetCampaignEvent = TypedEvent<
  [string, string, BigNumber] & { nft: string; payee: string; price: BigNumber }
>;

export class Erc721Proxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: Erc721ProxyInterface;

  functions: {
    admin(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    campaigns(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        contractAddress: string;
        payeeAddress: string;
        price: BigNumber;
      }
    >;

    delCampaign(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPublicKey(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintTo(
      _srcNft: string,
      _reciver: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    preMint(
      _srcNft: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refund(
      _srcNft: string,
      _reciver: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _user: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCampaign(
      _contract: string,
      _payee: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicKey(
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTxFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    txFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  admin(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  campaigns(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      contractAddress: string;
      payeeAddress: string;
      price: BigNumber;
    }
  >;

  delCampaign(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPublicKey(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintTo(
    _srcNft: string,
    _reciver: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  preMint(
    _srcNft: string,
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refund(
    _srcNft: string,
    _reciver: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _user: string,
    _auth: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCampaign(
    _contract: string,
    _payee: string,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicKey(
    _key: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTxFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  txFee(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    campaigns(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        contractAddress: string;
        payeeAddress: string;
        price: BigNumber;
      }
    >;

    delCampaign(_contract: string, overrides?: CallOverrides): Promise<void>;

    getPublicKey(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    mintTo(
      _srcNft: string,
      _reciver: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    preMint(
      _srcNft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    refund(
      _srcNft: string,
      _reciver: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(
      _user: string,
      _auth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCampaign(
      _contract: string,
      _payee: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicKey(_key: string, overrides?: CallOverrides): Promise<void>;

    setTxFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    txFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_to: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DelCampaign(address)"(
      nft?: string | null
    ): TypedEventFilter<[string], { nft: string }>;

    DelCampaign(
      nft?: string | null
    ): TypedEventFilter<[string], { nft: string }>;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PreMint(address,address,uint256)"(
      sender?: null,
      srcNft?: null,
      tokenID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; srcNft: string; tokenID: BigNumber }
    >;

    PreMint(
      sender?: null,
      srcNft?: null,
      tokenID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; srcNft: string; tokenID: BigNumber }
    >;

    "ProxyMinted(address,address,uint256)"(
      reciver?: null,
      srcNft?: null,
      tokenID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { reciver: string; srcNft: string; tokenID: BigNumber }
    >;

    ProxyMinted(
      reciver?: null,
      srcNft?: null,
      tokenID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { reciver: string; srcNft: string; tokenID: BigNumber }
    >;

    "SetCampaign(address,address,uint256)"(
      nft?: string | null,
      payee?: string | null,
      price?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { nft: string; payee: string; price: BigNumber }
    >;

    SetCampaign(
      nft?: string | null,
      payee?: string | null,
      price?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { nft: string; payee: string; price: BigNumber }
    >;
  };

  estimateGas: {
    admin(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    campaigns(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    delCampaign(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPublicKey(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintTo(
      _srcNft: string,
      _reciver: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    preMint(
      _srcNft: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refund(
      _srcNft: string,
      _reciver: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _user: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCampaign(
      _contract: string,
      _payee: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicKey(
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTxFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    txFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaigns(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delCampaign(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPublicKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintTo(
      _srcNft: string,
      _reciver: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preMint(
      _srcNft: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      _srcNft: string,
      _reciver: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _user: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCampaign(
      _contract: string,
      _payee: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicKey(
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTxFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    txFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
