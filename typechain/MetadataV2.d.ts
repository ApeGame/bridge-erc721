/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MetadataV2Interface extends ethers.utils.Interface {
  functions: {
    "admin(address)": FunctionFragment;
    "del(uint256)": FunctionFragment;
    "getDetail(uint256)": FunctionFragment;
    "getMetadataInfo(uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "set(uint256,(string,string,string,string,tuple[],string))": FunctionFragment;
    "setAdmin(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values: [string]): string;
  encodeFunctionData(functionFragment: "del", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getDetail",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [
      BigNumberish,
      {
        name: string;
        index: string;
        image: string;
        description: string;
        attributes: { value: string; traitType: string }[];
        detail: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "del", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDetail", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddMetadata(uint256,tuple)": EventFragment;
    "DelMetadata(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddMetadata"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelMetadata"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AddMetadataEvent = TypedEvent<
  [
    BigNumber,
    [
      string,
      string,
      string,
      string,
      ([string, string] & { value: string; traitType: string })[],
      string
    ] & {
      name: string;
      index: string;
      image: string;
      description: string;
      attributes: ([string, string] & { value: string; traitType: string })[];
      detail: string;
    }
  ] & {
    tokenId: BigNumber;
    data: [
      string,
      string,
      string,
      string,
      ([string, string] & { value: string; traitType: string })[],
      string
    ] & {
      name: string;
      index: string;
      image: string;
      description: string;
      attributes: ([string, string] & { value: string; traitType: string })[];
      detail: string;
    };
  }
>;

export type DelMetadataEvent = TypedEvent<[BigNumber] & { tokenId: BigNumber }>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class MetadataV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MetadataV2Interface;

  functions: {
    admin(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    del(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDetail(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    getMetadataInfo(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          ([string, string] & { value: string; traitType: string })[]
        ] & {
          name: string;
          index: string;
          image: string;
          description: string;
          attributes: ([string, string] & {
            value: string;
            traitType: string;
          })[];
        }
      ] & {
        data: [
          string,
          string,
          string,
          string,
          ([string, string] & { value: string; traitType: string })[]
        ] & {
          name: string;
          index: string;
          image: string;
          description: string;
          attributes: ([string, string] & {
            value: string;
            traitType: string;
          })[];
        };
      }
    >;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set(
      _tokenId: BigNumberish,
      _data: {
        name: string;
        index: string;
        image: string;
        description: string;
        attributes: { value: string; traitType: string }[];
        detail: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _user: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  admin(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  del(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDetail(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getMetadataInfo(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      ([string, string] & { value: string; traitType: string })[]
    ] & {
      name: string;
      index: string;
      image: string;
      description: string;
      attributes: ([string, string] & { value: string; traitType: string })[];
    }
  >;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set(
    _tokenId: BigNumberish,
    _data: {
      name: string;
      index: string;
      image: string;
      description: string;
      attributes: { value: string; traitType: string }[];
      detail: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _user: string,
    _auth: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    del(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getDetail(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMetadataInfo(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        ([string, string] & { value: string; traitType: string })[]
      ] & {
        name: string;
        index: string;
        image: string;
        description: string;
        attributes: ([string, string] & { value: string; traitType: string })[];
      }
    >;

    initialize(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    set(
      _tokenId: BigNumberish,
      _data: {
        name: string;
        index: string;
        image: string;
        description: string;
        attributes: { value: string; traitType: string }[];
        detail: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      _user: string,
      _auth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddMetadata(uint256,tuple)"(
      tokenId?: BigNumberish | null,
      data?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          string,
          string,
          string,
          string,
          ([string, string] & { value: string; traitType: string })[],
          string
        ] & {
          name: string;
          index: string;
          image: string;
          description: string;
          attributes: ([string, string] & {
            value: string;
            traitType: string;
          })[];
          detail: string;
        }
      ],
      {
        tokenId: BigNumber;
        data: [
          string,
          string,
          string,
          string,
          ([string, string] & { value: string; traitType: string })[],
          string
        ] & {
          name: string;
          index: string;
          image: string;
          description: string;
          attributes: ([string, string] & {
            value: string;
            traitType: string;
          })[];
          detail: string;
        };
      }
    >;

    AddMetadata(
      tokenId?: BigNumberish | null,
      data?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          string,
          string,
          string,
          string,
          ([string, string] & { value: string; traitType: string })[],
          string
        ] & {
          name: string;
          index: string;
          image: string;
          description: string;
          attributes: ([string, string] & {
            value: string;
            traitType: string;
          })[];
          detail: string;
        }
      ],
      {
        tokenId: BigNumber;
        data: [
          string,
          string,
          string,
          string,
          ([string, string] & { value: string; traitType: string })[],
          string
        ] & {
          name: string;
          index: string;
          image: string;
          description: string;
          attributes: ([string, string] & {
            value: string;
            traitType: string;
          })[];
          detail: string;
        };
      }
    >;

    "DelMetadata(uint256)"(
      tokenId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { tokenId: BigNumber }>;

    DelMetadata(
      tokenId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { tokenId: BigNumber }>;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    admin(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    del(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDetail(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadataInfo(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set(
      _tokenId: BigNumberish,
      _data: {
        name: string;
        index: string;
        image: string;
        description: string;
        attributes: { value: string; traitType: string }[];
        detail: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _user: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    del(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDetail(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadataInfo(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set(
      _tokenId: BigNumberish,
      _data: {
        name: string;
        index: string;
        image: string;
        description: string;
        attributes: { value: string; traitType: string }[];
        detail: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _user: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
